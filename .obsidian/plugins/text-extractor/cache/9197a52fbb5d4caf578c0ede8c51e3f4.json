{"path":"Formal Methods/Lectures/lezione9.pdf","text":"FORMAL METHODS FOR SYSTEM VERIFICATION Tackling state space explosion in Markov models: lumpability Sabina Rossi DAIS Universit`a Ca’ Foscari Venezia Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION State Space Explosion Intuition The numerical solution of CTMC models with N states relies on the construction of the N × N infinitesimal generator matrix Q, and the N-dimensional probability vector π. Unfortunately, the size of these entities often exceeds what can be handled in memory. This problem is known as state space explosion. All discrete state modelling approaches are prone to this problem. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION State Space Explosion Example 1: processors and resources Consider the following simple example. Proc def = (use, r1).Proc ′ Proc ′ def = (task, r2).Proc Res def = (use, r3).Res ′ Res ′ def = (update, r4).Res System def = Proc \u0003\u0001 {use} Res Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION State Space Explosion Example 1: processors and resources Let r13 = min(r1, r2). The transition diagram is System Proc′ \u0003\u0001 use Res′ Proc \u0003\u0001 use Res′ Proc′ \u0003\u0001 use Res (use,r13) (task,r2) (update,r4) (update,r4 ) (task,r2) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION State Space Explosion Example 1: processors and resources The infinitesimal generator matrix Q is: Q =        −r13 r13 0 0 −(r2 + r4) r2 r4 r4 0 −r4 0 r2 0 0 −r2        Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION State Space Explosion Example 1: processors and resources - multiple instances Consider the system: System def = Proc|| · · · ||Proc ︸ ︷︷ ︸ NP processors \u0003\u0001 {use} Res|| · · · ||Res ︸ ︷︷ ︸ NR resources The number of states in the corresponding CTMC is 2NP +NR NP NR 2NP +NR NP NR 2NP +NR 1 1 4 6 5 2048 2 1 8 6 6 4096 2 2 16 7 6 8192 3 2 32 7 7 16384 3 3 64 8 7 32768 4 3 128 8 8 65536 4 4 256 9 8 131072 5 4 512 9 9 262144 5 5 1024 10 9 524288 10 10 1048576 Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Tackling state space explosion Aggregation To overcome the state-space explosion problem in CTMCs, many mathematical tools and approaches have been proposed. We will present an approach to tackling the state space explosion problem via aggregation. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Model aggregation Aggregation and Markov property Aggregation can be formalized in terms of state-to-state equivalence relations to establish a partition of the state space of a model. Each set of equivalent states is replaced by one macro-state, then reducing the overall state space of the model. This is not as straightforward as it may seem if we wish the aggregated process to still be a Markov process — an arbitrary partition will not in general preserve the Markov property. In order to preserve the Markov property we must ensure that the partition satisfies a condition called lumpability. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Model aggregation Reducing by lumpability 1 3 2 4 5 6 7 8 9 10 Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Model aggregation Reducing by lumpability 1 3 2 4 5 6 7 8 9 10 Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Model aggregation Reducing by lumpability {1} {2,3,4,5} {6} {7,8} {9,10} Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Solution of an aggregated model Intuition Once we have the state space of the aggregated model we construct the CTMC in the obvious way - associating one state with each node in the aggregated state transition diagram. This CTMC will typically have a smaller state space than the one derived from the original state representation as a derivative graph, and certainly no larger. The steady state probability distribution can then be derived in the usual way by solving the global balance equations. The solution gives you the probability of being in the set of states that have the same behaviour. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Aggregations as equivalence relations Intuition Given a CTMC X (t) with state space S, state aggregations can be formalized in terms of equivalence relations over S. Any state-based equivalence over S induces a partition on the state space of the Markov chain and aggregation is achieved by clustering equivalent states into macro-states, thus reducing the overall state space. The transition rates between aggregated states are formed as a weighted sum of the transition rates of the states in the first class to the second class, weighted by the conditional steady state probability of being in each state in the class. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Equivalence relation Definition A binary relation ∼ on a set S, ∼⊆ S × S, is said to be an equivalence relation if and only if it is reflexive, symmetric and transitive. That is, for all s, s ′ and s ′′ ∈ S: reflexivity: s ∼ s simmetry: s ∼ s ′ if and only if s ′ ∼ s transitivity: if s ∼ s ′ and s ′ ∼ s ′′ then s ∼ s ′′. The equivalence class of s under ∼, denoted [s], is defined as [s] = {s ′ ∈ S| s ∼ s ′}. The set of all equivalence classes is denoted by S/ ∼. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Lumpability Notations Let ∼ be an equivalence relation over the state space S of a CTMC. If S = {0, 1, . . . , n} then the aggregated state space S/ ∼ is some {[i0]∼, [i1]∼, . . . , [iN ]∼}, where [i]∼ denotes the set of states that are equivalent to i and N ≤ n, ideally N ≪ n. By abuse of notation, if no confusion arises, we write [i] to denote the equivalence class [i]∼ relative to the equivalence relation ∼. We use the following notation: qi[k] = ∑ j∈[k] qij q[k]i = ∑ j∈[k] qji . Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Aggregated CTMC Definition Let ∼ be an equivalence relation over the state space S of a CTMC X (t). The aggregated CTMC, denoted ̃X (t), is defined as follows: the state space is the set of the equivalence classes S/ ∼ and its infinitesimal generator ̃Q can be derived from the following general aggregation equation for any [k], [l] ∈ S/ ∼ , ̃q[k][l] = ∑ i∈[k] πi qi[l] ∑ i∈[k] πi Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Aggregated CTMC Theorem The equilibrium distribution of the aggregated process is such that the steady-state probability of each macro-state is the sum of the steady-state probabilities of the states in the original process forming it. Let X (t) be an ergodic CTMC with state space S and ∼ be an equivalence relation over S. Let ̃X (t) be the aggregated process with respect to ∼. Let π and ̃π be the equilibrium distributions of X (t) and ̃X (t), respectively. Then for all [k] ∈ S/ ∼, ̃π[k] = ∑ i∈[k] πi . Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Aggregated CTMC Properties Exact calculation of the ̃q[k][l]’s will normally entail finding the steady state distribution of the original process. If the partitions are based on structural properties of the model it may be possible to calculate these values by a separate analysis of the corresponding submodel. In general, it will not be the case that the Markov property is preserved in the aggregated process. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Strong lumpability Intuition The characteristics of the aggregated process will depend on the equivalence relation used to form the partitions on which the aggregation is based. When the partition is such that the Markov property is preserved in the aggregated process, the process is said to be ordinarily or strongly lumpable with respect to the partition. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Strong lumpability Definition Let X (t) be a CTMC with state space S and ∼ be an equivalence relation over S. We say that X (t) is strongly (or ordinarily) lumpable with respect to ∼ if for any [k] ̸= [l] and i, j ∈ [l], it holds that qi[k] = qj[k] i.e., ∑ h∈[k] qih = ∑ h∈[k] qjh. In this case we say that ∼ is a strong lumpability for X (t). Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Strong lumpability Intuition A strongly lumpable partition exists if there is an equivalence relation over the state space such that for any two states within an equivalence class their aggregated transition rates to any other class are the same. [l] [k] i rib b i ria a rid dj rjc c rjd ria + rib + rid = rjc + rjd Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Strong lumpability Trivial lumpable relations Notice that every Markov process is strongly lumpable with respect to the identity relation and the trivial relation having only one equivalence class. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Strong lumpability Theorem Let ∼ be an equivalence relation over the state space of a Markov process X (t). We denote by ̃X (t) the aggregated process with respect to the specific relation ∼. If the relation ∼ is a strong lumpability then ∼ is a strong lumpability for X (t) if and only if ̃X (t) is a Markov process. If ̃Q = (̃q[i][j])[i],[j]∈S/∼ is the infinitesimal generator of ̃X (t) then for all [i], [j] ∈ S/ ∼, it holds that ̃q[i][j] = qi[j]. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Equiprobable distribution Definition A probability distribution π is equiprobable with respect to a partition of the state space S of a Markov process if for all the equivalence classes [i] ∈ S/ ∼ and for all i1, i2 ∈ [i], πi1 = πi2 The notion of exact lumpability is a sufficient condition for a distribution to be equiprobable with respect to a partition. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exact lumpability Definition Let X (t) be a CTMC with state space S and ∼ be an equivalence relation over S. We say that X (t) is exactly lumpable with respect to ∼ if for any [k], [l] ∈ S/ ∼ and i, j ∈ [l], it holds that q[k]i = q[k]j i.e., ∑ h∈[k] qhi = ∑ h∈[k] qhj . In this case we say that ∼ is an exact lumpability for X (t). Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exact lumpability Intuition An exact lumpability exists if there is an equivalence relation over the state space such that for any two states within an equivalence class the aggregated transition rates into such states from any other class are the same. [l] [k] rbi b i rai a rdi dj rcj c rdj rai + rbi + rdi = rcj + rdj Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exact lumpability Aggregated CTMC Let X (t) be a CTMC with state space S and ∼ be an equivalence relation over S. If X (t) is exactly lumpable with respect to ∼ (resp. ∼ is an exact lumping for X (t)) then for all i1 ∼ i2, πi1 = πi2. Notice that every Markov process is exactly lumpable with respect to the identity relation. However, differently from strong lumpabality, the relation having only one equivalence class is in general not an exact lumpability since, in this case, the equiprobability of its equilibrium distribution would not hold. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Strict lumpability Definition Let X (t) be a CTMC and ∼ be an equivalence relation over its state space. We say that X (t) is strictly lumpable with respect to ∼ if it is both strongly and exactly lumpable with respect to ∼. ∼ is a strict lumpability for X (t) if, and only if, it is both a strong and an exact lumpability. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Strict lumpability Properties Let X (t) be a CTMC with state space S and ∼ be a strict lumpability for X (t). Then ̃X (t) is a Markov process; πi1 = πi2 , for all i1, i2 ∈ S such that i1 ∼ i2; ̃q[i][j] = qi[j], for all [i], [j] ∈ S/ ∼. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Strong lumpability Example 1 Consider the CTMC of the picture with ρ ̸= ν. Let S = {1, 2, 3, 4} be its state space and ∼ be the equivalence relation such that 1 ∼ 3 and 2 ∼ 4, inducing the partition S/ ∼= {{1, 3}, {2, 4}}. ∼ is a strong lumpability for X (t) but it is not an exact lumpability. Indeed, for instance, q{2,4},1 ̸= q{2,4},3 when ρ ̸= ν. 2 1 3 4 ρ ν λ µ λ µ ρ ν 2, 4 1, 3 ρ+ν λ+µ Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Strict lumpability Example 2 Consider the CTMC with state space S = {i1, i2, j1, j2, j3} depicted below. Let ∼ be the equivalence relation defined by the reflexive and transitive closure of: i1 ∼ i2, j1 ∼ j2 and j2 ∼ j3. The state space S is partitioned into the classes: S/ ∼= {[i], [j]}, where [i] = {i1, i2} and [j] = {j1, j2, j3}. j1 i1 j2 i2 j3 2 4 2 1 4 2 1 2 3 3 [j] [i] 6 3 Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Strict lumpability Example 2 Observe that qj1[i] = qj2[i] = qj3[i] = 6 qi1[j] = qi2[j] = 3 q[i]j1 = q[i]j2 = q[i]j3 = 2 q[i]i1 = q[i]i2 = −3 q[j]i1 = q[j]i2 = 9 q[j]j1 = q[j]j2 = q[j]j3 = −6 . Hence, by definition, ∼ is a strict lumpabability for X (t). Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION","libVersion":"0.3.2","langs":""}