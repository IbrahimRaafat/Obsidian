{"path":"Advanced Programming/PDFs/0. Welcome.pdf","text":"ADVANCED PROGRAMMING LANGUAGES Fall 2024, CM 0632. MSc in Computer Science and Informa\u0000on Technology, Ca‚Äô Foscari University of Venice What is this course about? It‚Äôs about fun programming! We‚Äôll take an in depth look at the advanced concepts and techniques of modern programming languages (func\u0000onal, object-oriented and concurrent) together with an introduc\u0000on to the founda\u0000onal tools from programming language theory and type theore\u0000c frameworks. Most of the development will focus on Scala, which provides a nice framework where modern techniques have been integrated based on a principled design, but we will draw also from other sta\u0000cally typed languages from which Scala‚Äô design is derived, such as ML, Haskell, Java, Rust as well as, occasionally, on dynamically typed languages like Python. Contents Introduc\u0000on Evolu\u0000on of programming languages design and implementa\u0000on Introduc\u0000on to func\u0000onal programming in Scala. Typing founda\u0000ons of programming languages Untyped Lambda Calculus and its opera\u0000onal seman\u0000cs Typing: types, type systems, type safety Func\u0000onal data and func\u0000on modeling Immutable non-encapsulated data structures Lists and trees: Ô¨Årst-order, higher-order and polymorphic func\u0000ons Subtyping and subtype polymorphism The subs\u0000tu\u0000on principle and the subtype rela\u0000on Typing and Subtyping: nominal vs structural Object-Oriented data modeling (in Scala) Encapsulated data types: Scala‚Äôs traits, classes, and hierarchy of types Type parametriza\u0000on Generics, variance and type bounds Collec\u0000ons Ad hoc polymorphism From overloading to constrained parametric polymorphism (with F-bounded polymorphism) QualiÔ¨Åed types and type classes Strict vs Non-strict evalua\u0000on Evalua\u0000ons strategies: founda\u0000ons and implementa\u0000on consequences Lazy evalua\u0000on at work: thunks, lazy lists and inÔ¨Ånite data structures Error handling Excep\u0000ons: strengths, weaknesses and alterna\u0000ves. Op\u0000ons and Try Monads and monadic programming Conceptual framework Applica\u0000ons: State, IO Textbooks and other resources [FP-Scala] Func\u0000onal Programming in Scala. P. Chiusano, R. Bjarnason. Manning Press. 2015 Source code available at: h\u0000ps://github.com/fpinscala/fpinscala/ [TAPL] Types and Programming Languages. B.C. Pierce. The MIT Press. 2002. Papers and websites that will be made available as we progress through the course (pls refer to the moodle site for the course Weekly \u0000metable Tuesday 14:00 - 15:30, Aula B Wednesday 12:15 - 13:45, Aula B Exam and grades Will be encouraging collabora\u0000ve work and try to make the course interac\u0000ve. The Ô¨Ånal grade will be based on three elements: ac\u0000ve class partecipa\u0000on a wri\u0000en test (collabora\u0000ve) work on programming projects / readings of research ar\u0000cles Why take this course? Because . . . it will be fun! you‚Äôll learn amazing programming techniques you‚Äôll be exposed to some of the most fascina\u0000ng pieces of computer science theory Follow-up homework As you (should) know, for each course we teach, we are asked to iden\u0000fy one or more goals of the U.N. Agenda for Sustainable Development which we believe are related to the subject of the course. Well, for this course I have chosen the following one: it‚Äôs more a wish for you and you future than anything else üòâ A more interes\u0000ng exercise, is to Ô¨Ånd out which programming languages are more environmental friendly and why. [Hint: google will help]","libVersion":"0.3.2","langs":""}