{"path":"Formal Methods/Lectures/lezione6.pdf","text":"FORMAL METHODS FOR SYSTEM VERIFICATION Examples: Labelled multi-transition systems Sabina Rossi DAIS Universit`a Ca’ Foscari Venezia Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Example 1: Multiple server queue as a single component Description We consider a queue with c servers a buffer with capacity N, where N > c customers arrive at rate λ the service rate of each server is µ S1 Sc λ µ µ µ µ Buffer Servers Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Example 1: Multiple server queue as a single component PEPA model Let Qi denote the component representing the behaviour of the queue when there are i costumers present (including those in service). Q0 def = (accept, λ).Q1 ... Qi def = (accept, λ).Qi+1 + (serve, iµ).Qi−1 1 ≤ i < c ... Qj def = (accept, λ).Qj+1 + (serve, cµ).Qj−1 c ≤ j < N ... QN def = (loss, λ).QN + (serve, cµ).QN−1 Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Example 1: Multiple server queue as a single component Transition diagram Following the operational rules we can construct the labelled multi-transition system (also called transition diagram) representing the possible behaviours of a component. The transitions are labelled by the activities which they represent. Q0 Q1 · · · Qc−1 · · · QN−1 QN (accept,λ) (accept,λ) (serve,µ) (accept,λ) (serve,2µ) (accept,λ) (serve,(c−1)µ) (accept,λ) (serve,cµ) (accept,λ) (serve,cµ) (serve,cµ) (loss,λ) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Example 2: Single server queue as two cooperating components Description We consider a single server queue with buffer capacity N customer population N customers arrive at rate λ the service rate is µ The arrival process will be suspended when the queue is full as all the costomers will already be present in the queue. µλ Buffer Server Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Example 2: Single server queue as two cooperating components PEPA model of the server Server def = (serve, µ).Server Transition diagram Server (serve,µ) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Example 2: Single server queue as two cooperating components PEPA model of the buffer Buffer0 def = (accept, λ).Buffer1 ... Bufferi def = (accept, λ).Bufferi+1 + (serve, ⊤).Bufferi−1 1 ≤ i < N ... BufferN def = (serve, ⊤).BufferN−1 Transition diagram Buffer0 Buffer1 · · · BufferN−1 BufferN (accept,λ) (accept,λ) (serve,⊤) (accept,λ) (serve,⊤) (accept,λ) (serve,⊤) (serve,⊤) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Example 2: Single server queue as two cooperating components PEPA model of the queue Queue0 def = Buffer0 \u0003\u0001 {serve} Server Transition diagram Queue0 Queue1 · · · QueueN−1 QueueN (accept,λ) (accept,λ) (serve,µ) (accept,λ) (serve,µ) (accept,λ) (serve,µ) (serve,µ) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Example 3: Simple resource usage as two cooperating components PEPA model The system has two components: Process and Resource. The Process will undertake two activities consecutively: use with some rate r1 in cooperation with the resource, and task at some rate r2. The Resource will engage in two activities consecutively: use at some rate r3 and update at a rate r4. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Example 3: Simple resource usage as two cooperating components PEPA model of the system Process def = (use, r1).Process ′ Process ′ def = (task, r2).Process Resource def = (use, r3).Resource′ Resource′ def = (update, r4).Resource System def = Process \u0003\u0001 {use} Resource Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Example 3: Simple resource usage as two cooperating components Transition diagram Let r13 = min(r1, r2). System Process′ \u0003\u0001 use Resouce′ Process \u0003\u0001 use Resouce′ Process′ \u0003\u0001 use Resouce (use,r13) (task,r2) (update,r4 ) (update,r4 ) (task,r2) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 1 A web server Consider a web server which offers html pages for download and only when the transfer is complete will the server be released and available again for acquisition. The clients are web browsers, in a domain with a local cache of frequently requested pages. Thus any display request may have two possible outcomes: demand for access to data stored at the remote server (with probability p) or demand for access to data available in the local cache (with probability (1 − p)). The browser and the server cooperate when the browser needs to download data which is not available locally. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 1 A web server: PEPA model Server def = (get, ⊤).(download, µ).(rel, ⊤).Server Browser def = (display , pλ).(get, g ).(download, ⊤).(rel, r ).Browser + (display , (1 − p)λ).(cache, m).Browser WEB def = Browser \u0003\u0001 L Server where L = {get, download, rel}. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 1 (a) Define the set of current action types A(WEB) A(WEB) = (A(Browser ) \\ L) ∪ (A(Server ) \\ L) ∪(A(Browser ) ∩ A(Server ) ∩ L) = {display } ∪ ∅ ∪ ∅ = {display } . Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 1 (b) Define the activity multiset Act(WEB) Act(WEB) = Act\\L(Browser ) ⊎ Act\\L(Server ) ⊎{|(α, r )| α ∈ L, ∃(α, r1) ∈ Act∩L(Browser ), ∃(α, r2) ∈ Act∩L(Server ), r = r1 rα(Browser ) r2 rα(Server ) min(rα(Browser ), rα(Server ))|} = {|(display , pλ), (display , (1 − p)λ)|} ⊎ ∅ ⊎ ∅ = {|(display , pλ), (display , (1 − p)λ)|} . Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 1 (c) Draw the derivation graph of the Server component Server def = (get, ⊤).Server1 Server1 def = (download, µ).Server2 Server2 def = (rel, ⊤).Server Server Server2 Server1 (get,⊤)(rel,⊤) (download,µ) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 1 (d) Draw the derivation graph of the Browser component Browser def = (display , pλ).Browser1 + (display , (1 − p)λ).Browser2 Browser1 def = (get, g ).Browser3 Browser2 def = (cache, m).Browser Browser3 def = (download, ⊤).Browser4 Browser4 def = (rel, r ).Browser Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 1 (d) Draw the derivation graph of the Browser component Browser Browser1 Browser2 Browser3 Browser4 (display ,(1−p)λ) (display ,pλ) (get,g ) (cache,m) (download,⊤) (rel,r ) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 1 (e) Define the apparent rate rdisplay (Browser ) rdisplay (Browser ) = rdisplay ((display , pλ).Browser1+ (display , (1 − p)λ).Browser2)) = rdisplay ((display , pλ).Browser1)+ rdisplay ((display , (1 − p)λ).Browser2)) = pλ + (1 − p)λ = (p + 1 − p)λ = λ Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 1 (f ) Draw the derivation graph of the WEB component WEB Browser1 \u0003\u0001 L Server Browser2 \u0003\u0001 L Server Browser3 \u0003\u0001 L Server1 Browser4 \u0003\u0001 L Server2 (display ,(1−p)λ) (display ,pλ) (get,g ) (cache,m) (download,µ) (rel,r ) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 2 A web server Referring to the system above, suppose that we wish to hide the access of the browser to its local cache, i.e., Browser ′ def = Browser /{cache} A system with two browsers cooperating with the server on action types L = {get, download, rel} is represented as: WEB ′ def = (Browser ′||Browser ′) \u0003\u0001 L Server Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 2 (a) Draw the derivation graph of the Browser ′ component Browser ′ Browser1/{cache} Browser2/{cache} Browser3/{cache} Browser4/{cache} (display ,(1−p)λ) (display ,pλ) (get,g ) (τ,m) (download,⊤) (rel,r ) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 2 (b) Define the apparent rate rdisplay (WEB ′) rdisplay (WEB′) = rdisplay ((Browser ′||Browser ′) \u0003\u0001 L Server ) since display ̸∈ L = rdisplay (Browser ′||Browser ′) + rdisplay (Server ) = rdisplay (Browser ′||Browser ′) + 0 = rdisplay (Browser ′) + rdisplay ((Browser ′) + 0 = rdisplay (Browser /{cache}) + rdisplay (Browser /{cache}) + 0 since display ̸∈ {cache} = rdisplay (Browser ) + rdisplay ((Browser ) = pλ + (1 − p)λ + pλ + (1 − p)λ = λ + λ = 2λ Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 2 (c) Define the activity multiset Act(WEB ′) Act(WEB′) = Act((Browser ′||Browser ′) \u0003\u0001 L Server ) = Act\\L(Browser ′||Browser ′) ⊎ Act\\L(Server ) ⊎ {|(α, r )| α ∈ L, ∃(α, r1) ∈ Act∩L(Browser ′||Browser ′), ∃(α, r2) ∈ Act∩L(Server ), r = r1 rα (Browser ′ ||Browser ′ ) r2 rα(Server ) min(rα(Browser ′||Browser ′), rα(Server ))|} = Act\\L(Browser ′||Browser ′) ⊎ ∅ ⊎ ∅ = Act\\L(Browser ′) ⊎ Act\\L(Browser ′) = {|(display , pλ), (display , (1 − p)λ)|} ⊎ {|(display , pλ), (display , (1 − p)λ)|} = {|(display , pλ), (display , (1 − p)λ), (display , pλ), (display , (1 − p)λ)|} Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 3 A web server Consider Browser ′′ def = (get, g ).(download, ⊤).(rel, r ).Browser ′′ WEB ′′ def = (Browser ′′||Browser ′′) \u0003\u0001 L Server where L = {get, download, rel}. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 3 (a) Determine whether WEB ′′ is a derivative of WEB Recall that WEB = Browser \u0003\u0001 L Server WEB ′′ = (Browser ′′||Browser ′′) \u0003\u0001 L Server We have that WEB ′′ ̸∈ ds(WEB) since Browser does not contain any cooperation. Indeed, each derivative of Browser \u0003\u0001 L Server has the form Browseri \u0003\u0001 L Serveri where Browseri ∈ ds(Browser ) and Serveri ∈ ds(Server ). Suppose that WEB ′′ ∈ ds(WEB), i.e., (Browser ′′||Browser ′′) \u0003\u0001 L Server ∈ ds(Browser \u0003\u0001 L Server ). Hence (Browser ′′||Browser ′′) ∈ ds(Browser ) but this is not possible since Browser does not contain any cooperation constructor. Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 3 (b) Define the set of current action types A(WEB ′′) A(WEB ′′) = A((Browser ′′||Browser ′′) \u0003\u0001 L Server ) = (A(Browser ′′||Browser ′′) \\ L) ∪ (A(Server ) \\ L) ∪(A(Browser ′′||Browser ′′) ∩ A(Server ) ∩ L) = ∅ ∪ ∅ ∪ {get} = {get} . Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 3 (c) Define the apparent rate rget(WEB ′′) rget (WEB′′) = rget ((Browser ′′||Browser ′′) \u0003\u0001 L Server ) since get ∈ L = min(rget (Browser ′′||Browser ′′), rget (Server )) = min(rget (Browser ′′ \u0003\u0001 ∅ Browser ′′), rget (Server )) since get ̸∈ ∅ = min(rget (Browser ′′) + rget Browser ′′), rget (Server )) = min(g + g , ⊤) = g + g = 2g Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 3 (d) Define the activity multiset Act(WEB ′′) Act(WEB′′) = Act((Browser ′′||Browser ′′) \u0003\u0001 L Server ) = Act\\L(Browser ′′||Browser ′′) ⊎ Act\\L(Server ) ⊎ {|(α, r )| α ∈ L, ∃(α, r1) ∈ Act∩L(Browser ′′||Browser ′′), ∃(α, r2) ∈ Act∩L(Server ), r = r1 rα (Browser ′′ ||Browser ′′) r2 rα (Server ) min(rα(Browser ′′||Browser ′′), rα(Server ))|} = ∅ ⊎ ∅ ⊎ {|(get, g ), (get, g )|} = {|(get, g ), (get, g )|} Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 4 Producer-Consumer Consider the following PEPA model which describes a producer which puts goods into one of two buffers. These goods are extracted from each of the buffers by the consumer which is associated with that buffer. Thus the producer and the buffers cooperate on the put action and the consumers cooperate with their buffer on the get action. Producer def = (put, λ).Producer Consumer def = (get, µ).Consumer Buffer def = (put, ⊤).(get, ⊤).Buffer System def = Producer \u0003\u0001 {put} ( (Buffer \u0003\u0001 {get} Consumer )||(Buffer \u0003\u0001 {get} Consumer )) For simplicity, we use the following abbrevations: BC def = Buffer \u0003\u0001 {get} Consumer 2BC def = (Buffer \u0003\u0001 {get} Consumer )||(Buffer \u0003\u0001 {get} Consumer ) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 4 (a) Define the set of current action types A(2BC ) A(2BC ) = A(BC ) ∪ A(BC ) = (A(Buffer ) \\ {get}) ∪ (A(Consumer ) \\ {get}) ∪ (A(Buffer ) ∩ A(Consumer ) ∩ {get}) ∪(A(Buffer ) \\ {get}) ∪ (A(Consumer ) \\ {get}) ∪ (A(Buffer ) ∩ A(Consumer ) ∩ {get}) = ({put} ∪ ∅ ∪ ∅) ∪ ({put} ∪ ∅ ∪ ∅) = {put} Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 4 (b) Define the set of current action types A(System) A(System) = A( Producer \u0003\u0001 {put} ( (Buffer \u0003\u0001 {get} Consumer )||(Buffer \u0003\u0001 {get} Consumer ))) = (A(Producer ) \\ {put}) ∪ (A(2BC ) \\ {put}) ∪ (A(Producer ) ∩ A(2BC ) ∩ {put}) = ∅ ∪ ∅ ∪ {put} = {put} Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 4 (c) Define the activity multiset Act(2BC ) Act(2BC ) = Act( (Buffer \u0003\u0001 {get} Consumer )||(Buffer \u0003\u0001 {get} Consumer )) = Act(Buffer \u0003\u0001 {get} Consumer ) ⊎ Act(Buffer \u0003\u0001 {get} Consumer ) = Act\\{get}(Buffer ) ⊎ Act\\{get}(Consumer ) ⊎ ∅ ⊎ Act\\{get}(Buffer ) ⊎ Act\\{get}(Consumer ) ⊎ ∅ = {|(put, ⊤)|} ⊎ ∅ ⊎ ∅ ⊎ {|(put, ⊤)|} ⊎ ∅ ⊎ ∅ = {|(put, ⊤), (put, ⊤)|} Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 4 (d) Define the activity multiset Act(System) Act(System) = Act( Producer \u0003\u0001 {put} ((Buffer \u0003\u0001 {get} Consumer )||(Buffer \u0003\u0001 {get} Consumer ))) = Act\\{put}(Producer ) ⊎ Act\\{put}(2BC ) ⊎ {|(α, r )| α ∈ {put}, ∃(α, r1) ∈ Act∩{put}(Producer ), ∃(α, r2) ∈ Act∩{put}(2BC ), r = r1 rα (Producer ) r2 rα (2BC ) min(rα(Producer ), rα(2BC ))|} = ∅ ⊎ ∅ ⊎ {|(put, r )| ∃(put, r1) ∈ Act∩{put}(Producer ), ∃(put, r2) ∈ Act∩{put}(2BC ), r = r1 rput (Producer ) r2 rput (2BC ) min(rput (Producer ), rput (2BC ))|} = {|(put, r )| ∃(put, r1) ∈ Act∩{put}(Producer ), ∃(put, r2) ∈ Act∩{put}(2BC ), r = λ λ · ⊤ 2⊤ · min(λ, 2⊤)|} {|(put, λ 2 ), (put, λ 2 )|} Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 4 (e) Define rget(2BC ) rget (2BC ) = rget (BC ) + rget (BC ) = rget (Buffer \u0003\u0001 {get} Consumer ) + rget (Buffer \u0003\u0001 {get} Consumer ) = min(rget (Buffer ), rget (Consumer )) + min(rget (Buffer ), rget (Consumer )) = min(0, µ) + min(0, µ) = 0 Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 4 (f ) Define rput(2BC ) rput (2BC ) = rput (BC ) + rput (BC ) = rput (Buffer \u0003\u0001 {get} Consumer ) + rput (Buffer \u0003\u0001 {get} Consumer ) = rput (Buffer ) + rput (Consumer ) + rput (Buffer ) + rput (Consumer ) = ⊤ + 0 + ⊤ + 0 = 2⊤ (g ) Define rput(System) rput (System) = min(rput (Producer ), rput (2BC )) = min(λ, 2T ) = λ Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 4 (h) Draw the derivation graph of the BC component BC B1C (put,⊤) (get,µ) where BC def = Buffer \u0003\u0001 {get} Consumer B1C def = (get, ⊤).Buffer \u0003\u0001 {get} Consumer Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 4 (h) Draw the derivation graph of the 2BC component 2BC B1C ||BC BC ||B1C B1C ||B1C (put,⊤)(put,⊤) (get,µ) (put,⊤) (put,⊤) (get,µ) (get,µ) (get,µ) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 4 (h) Draw the derivation graph of the System component System P \u0003\u0001 {put} B1C ||BC P \u0003\u0001 {put} BC ||B1C P \u0003\u0001 {put} B1C ||B1C (put, λ 2 )(put, λ 2 ) (get,µ) (put,λ) (put,λ) (get,µ) (get,µ) (get,µ) Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 5 Two independet parallel processes Consider the PEPA component: P1 def = (start, r1).P2 P2 def = (run, r2).P3 P3 def = (stop, r3).P1 Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 5 (a) Determine the derivative set of P1||P1, ds(P1||P1) ds(P1||P1) = { P1||P1 , P1||P2 , P1||P3 , P2||P1 , P2||P2 , P2||P3 , P3||P1 , P3||P2 , P3||P3} Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION Exercise 5 (b) Define the apparent rates rrun(P2||P2) and rrun(P2 \u0003\u0001 {run} P2) rrun(P2||P2) = rrun(P2) + rrun(P2) = r2 + r2 = 2r2 . rrun(P2 \u0003\u0001 {run} P2) = min(rrun(P2), rrun(P2) = rrun(P2) = r2 . Sabina Rossi FORMAL METHODS FOR SYSTEM VERIFICATION","libVersion":"0.3.2","langs":""}