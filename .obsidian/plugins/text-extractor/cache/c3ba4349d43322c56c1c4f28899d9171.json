{"path":"System Security/Lecture 0 Introduction-to-Cryptography-small.pdf","text":"Introduction to Cryptography System Security (CM0625, CM0631) 2024-25 Universit√† Ca‚Äô Foscari Venezia Riccardo Focardi www.unive.it/data/persone/5590470 secgroup.dais.unive.it Cryptography is everywhereExample: cryptography over the webhttp: no protection!https: communication is encryptedCryptography in embedded devicesCryptography in banks Payments, ATMs, money transfers, ... Hardware Security Module (HSM) Costs about 5k-20k ‚Ç¨ for a market of 200M ‚Ç¨ a year A cipher is deÔ¨Åned through two functions ‚óè Encryption: given a plaintext and a key K1 returns a ciphertext E K1(X) = Y ‚óè Decryption: given a ciphertext and a key K2 returns a plaintext D K2(Y) = X What is a Cipher? Keys K1 and K2 are related: decrypting the encryption of X we obtain X: D K2(EK1(X)) = X ‚óè When K1=K2 we have a symmetric key cipher (example: AES) ‚óè When K1‚â†K2 we have an asymmetric key cipher (example: RSA) Security (known plaintext scenario): it should be infeasible to compute X or K2 from Y even knowing other pairs (X1,Y 1), ‚Ä¶ , (X n,Y n) Symmetric and asymmetric ciphersCryptographic hash functions DeÔ¨Ånition (hash function). A hash function h computes eÔ¨Éciently a Ô¨Åxed length value h(x)=z called digest, from an x of arbitrary size. NOTE: Collisions are possible: h(x1) = h(x2) DeÔ¨Ånition (collision resistant hash function). A hash function h is collision resistant if it is infeasible to compute different x1, x2 such that h(x1) = h(x2) DeÔ¨Ånition (one-way hash function). A hash function h is one-way if, given a digest z, it is infeasible to compute a preimage x‚Äô such that h(x‚Äô)=z ‚áí Finding a pre-image is computationally infeasible Collision resistant hash function x 1 x 2 z Hard to Ô¨Ånd a collision: Ô¨Ånding two colliding x1, x 2 is infeasible h h Fixed size Arbitrary size One-way hash function x 1 x n x 2 z Easy to compute Hard to invert: computing any of x 1, x 2, ‚Ä¶, x n is infeasible h h h Fixed size Arbitrary size Nice and elegant ‚Ä¶ but things can go wrong Many attacks on real world cryptography in the last years: ‚óè S Calzavara, R Focardi, M Nemec, A Rabitti, M Squarcina. Postcards from the post-HTTP world: ampliÔ¨Åcation of HTTPS vulnerabilities in the web ecosystem. IEEE S&P 2019 ‚óè R Focardi, F Palmarini, M Squarcina, G Steel, M Tempesta. Mind Your Keys? A Security Evaluation of Java Keystores. NDSS 2018 ‚óè R. Verdult, F. D. Garcia and B. Ege. Dismantling Megamos Crypto: Wirelessly Lockpicking a Vehicle Immobilizer. USENIX Security 2013 ‚óè R. Bardou, R. Focardi, Y. Kawamoto, L. Simionato, G. Steel, J. Tsay. EÔ¨Écient Padding Oracle Attacks on Cryptographic Hardware. CRYPTO 2012 ‚óè M. Bortolozzo, M. Centenaro, R. Focardi, G. Steel. Attacking and Ô¨Åxing PKCS#11 security tokens. ACM CCS 2010 ‚óè F. D. Garcia, P. van Rossum, R. Verdult and R. Wichers Schreur. Wirelessly Pickpocketing a Mifare Classic Card. IEEE S&P 2009 AmpliÔ¨Åcation of HTTPS vulnerabilities in the web ecosystem. IEEE S&P 2019 Smartcards and crypto tokensReal attacks! 20 February 2013 35 000 000 ‚Ç¨ stolen from ATMs in less than 10 hours People think crypto look like this ... ‚Ä¶ but it is more like this! 16th Century, Citadel of Dinant, Belgium. Photo ¬© 2016 Ben Heine Cryptographic vulnerabilities Vulnerabilities in applications: can reveal keys or downgrade to less secure mechanisms (In)security of mechanisms: Crypto mechanisms are not equally secure ConÔ¨Åguration and management: The conÔ¨Åguration and management of cryptographic systems is complex and error prone Cryptanalysis: Improvements in technology and cryptanalysis require better crypto Vulnerabilities in applications Heartbleed Vulnerability in OpenSSL, the protocol underneath https An over-read allows for accessing process memory where server keys are stored Once those keys are leaked it is possible to mount a MITM attack and intercept the whole Web session http://heartbleed.com/ (In)security of mechanisms Modes of operation Needed when: ‚óè Data is bigger than the block size ‚óè It is necessary to encrypt a stream with a block cipher Example: AES-ECB is a mode of operation that splits long messages into blocks of 16 bytes (the size of AES block) 23 In ECB blocks are encrypted independently under the same key ‚óè Problem 1: Equal blocks are encrypted in the same way ‚óè Problem 2: Swapping encrypted blocks also swaps plaintext blocks ‚áí not so different from simple substitution ciphers! ECB mode of operation ‚áí Poor conÔ¨Ådentiality and integrity 24 Example 1: poor conÔ¨Ådentiality plaintext ciphertext (ECB) Example 1: simple substitutions of blocks plaintext ciphertext, after simple substitutions Example 1: using CBC! plaintext ciphertext (CBC mode) Consider sentences: ‚óè Security course is great!! ‚óè Today‚Äôs weather is really bad! When splitted in 16 bytes (AES) blocks they become: ‚óè Security course is great!!¬†¬†¬†¬†¬†¬† ‚óè Today‚Äôs weather is really bad!¬†¬† Task: given the two ciphertexts in AES-ECB, forge a new valid ciphertext putting the security course in a bad light üòÖ Example 2: breaking integrityChosen plaintext attack in ECB If an attacker can prepend arbitrary preÔ¨Åx to the plaintext they can bruteforce blocks byte after byte Intuitively: ‚óè prepend 15 known bytes ‚óè bruteforce byte 16 ‚óè iterate over all bytes 29 Realistic scenario (similar to the one in the BEAST attack): ‚óè Secure session cookies are sent over HTTPS ‚óè Javascript cannot access them ‚óè Malicious javascript can forge cross-domain requests to honest domains (cookie is sent!) ‚óè Attacker can add plaintext before the cookie value! c4 d3 12 0b c8 4f 43 50 a0 b5 7f 8d 92 19 31 ff A A A A A A A A A A A A A A A C0 The attack in detail (1) Attacker injects these First byte of cookie ciphertext, intercepted A A A A A A A A A A A A A A A 02 A A A A A A A A A A A A A A A 00 The attack in detail (2) Attacker injects these A A A A A A A A A A A A A A A 01 ... ‚Ä¶ until the ciphertext matches the previous one ‚áí C0 is leaked! A A A A A A A A A A A A A A C0 C1 42 a4 f3 f9 11 23 54 f5 c3 2f a4 c2 11 22 95 d4 The attack in detail (3) Attacker injects these First two bytes of cookie ciphertext, intercepted A A A A A A A A A A A A A A C0 02 A A A A A A A A A A A A A A C0 00 The attack in detail (4) Attacker injects these (C0 is known!) A A A A A A A A A A A A A A C0 01 ... ‚Ä¶ until the ciphertext matches the previous one ‚áí C1 is leaked! ConÔ¨Åguration and Management CTR: stream cipher ‚áí Random nonce is fundamental for security! 43 Fixed IV is a typical conÔ¨Åguration mistake! ciphertext 1: 8f079a817d1dfa5bb2b1e069b0f4027abc65db6d130e6f3c154611d165d66b0a2342473479 0df0769cc3c4f4f289e784ac0cc5cab7e47c5c1a ciphertext 2: 9f0a92807d33fb1ab7a9ad36e5cd4064a320da7a56122e21004c42c46d93214b28595b7776 12e46c9dc3c4eefedde88ee31c97c1b1e834135c Leaked plaintext: Dear Graham, I'll be happy to participate in the training A CTR with Ô¨Åxed nonce has been used ‚Ä¶ how would you break the other ciphertext? 44 Solution P1, P2 plaintexts and C1, C2 corresponding ciphertext Same nonce means same key K P1 ‚äï K = C1 P2 ‚äï K = C2 thusP1 ‚äï P2 = C1 ‚äï C2 P2 = P1 ‚äï C1 ‚äï C2 45 Key Management RSA SecurID Breach (March 2011) ‚óè Seed values for devices stored insecurely, compromised after phishing breach ‚óè 40M devices replaced, big companies breached, massive brand damageCryptanalysis Sophisticated attacks on crypto May 2012, sophisticated attack on Iranian nuclear programme named FLAME (and related to Stuxnet) ‚óè A fake certiÔ¨Åcate using an MD5 collision was used to install the malware, bypassing software update check ‚óè The MD5 collision method used was different from the one publicly known ‚áí State-level cyber-attack!! NOTE: MD5 is now deprecated and should not be used for cryptographic applications Cryptographic vulnerabilities Vulnerabilities in applications: can reveal keys or downgrade to less secure mechanisms Example: Heartbleed (In)security of mechanisms: Crypto mechanisms are not equally secure Example: Weaks modes of operation (ECB), padding oracles (PKCS7) Management: The conÔ¨Åguration and management of cryptographic systems is complex and error prone Examples: Fixed IV, bad key management Cryptanalysis: Improvement in technology/cryptanalysis requires better crypto Example: broken cryptographic hashes","libVersion":"0.3.2","langs":""}