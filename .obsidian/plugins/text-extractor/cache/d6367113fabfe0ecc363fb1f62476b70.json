{"path":"System Security/Lecture 10 Operating-System-Security.pdf","text":"Operating System Security System Security (CM0625, CM0631) 2024-25 Universit√† Ca‚Äô Foscari Venezia Riccardo Focardi secgroup.dais.unive.it Programs may be vulnerable and have security weaknesses Operating system security aims at providing adequate security guarantees even in presence of vulnerabilities/weaknesses Idea: security as a hardening process Introduction 2 White-list approved applications Patch third-party applications Patch operating system vulnerabilities, use latest versions Restrict administrative privileges ‚áí assist in creating a defence-in-depth system Hardening measures Australian Signals Directorate (ASD) 3 Security layers Physical hardware: the actual device Operating system: privileged kernel code, APIs, services, interacting with the physical hardware User applications and utilities: user programs interacting with the operating system APIs and services Physical Hardware Operating System User Application and Utilities ‚áí Attacks from ‚Äúbelow‚Äù if layers are not hardened so to provide appropriate security services 4 1. System security planning 2. Installation 3. Trusted code and patching 4. Unnecessary services 5. Access control 6. Additional security controls 7. Application security 8. Logging 9. Backup OS security 5 System security planning Aim: maximise security while minimizing costs When: from the very beginning of deployment (‚ÄúretroÔ¨Åtting‚Äù is diÔ¨Écult and expensive) Planning based on: ‚óè purpose of system, information type, security requirements ‚óè categories of users ‚óè how users authenticate ‚óè how access is managed ‚óè what access to other hosts (and how it is managed) ‚óè who administer the system and how (remotely vs. locally) ‚óè what additional security mechanisms are necessary. Ex. Ô¨Årewalls, anti-virus, logging, ... 6 1. System security planning 2. Installation 3. Trusted code and patching 4. Unnecessary services 5. Access control 6. Additional security controls 7. Application security 8. Logging 9. Backup OS security 7 Installation Installation: ideally done in an isolated environment with no incoming connections ‚óè system might be vulnerable in this phase ‚óè hardening is done after installation Outgoing connections only towards the necessary (veriÔ¨Åed) sites Secure boot: prevent changes in BIOS and limit the boot media to the trusted ones ‚óè prevent malicious hypervisors ‚óè prevent trivial bypass of access control (e.g. boot from external drive to access Ô¨Ålesystem) Cryptographic Ô¨Åle systems add a protection layer to stored data 8 1. System security planning 2. Installation 3. Trusted code and patching 4. Unnecessary services 5. Access control 6. Additional security controls 7. Application security 8. Logging 9. Backup OS security 9 Trusted code and patching Device drivers: programs with kernel level privileges should be installed with care, especially when third party ‚óè might be used to install malware Blue Pill rootkit installed through a rogue device driver and run a ‚Äúthin‚Äù hypervisor under Windows Vista Stuxnet installed rogue drivers digitally signed using stolen keys System should be up to date with all security patches installed (one of the ASD hardening measures) üëé Updates can introduce instability so, in systems with critical availability constraints, automatic updates are turned off ‚áí For these systems patches should be timely tested and applied 10 1. System security planning 2. Installation 3. Trusted code and patching 4. Unnecessary services 5. Access control 6. Additional security controls 7. Application security 8. Logging 9. Backup OS security { 11 Unnecessary services and access control Remove unnecessary software: if fewer software packages are available, then the risk of vulnerability is reduced Balance security and usability Not installing is better than removing or disabling: removing does not eliminate everything, attacker might re-enable disabled software Access control: all modern systems implement DAC and, in some cases, RBAC or MAC ASD hardening measures suggest to restrict administrative privileges ‚óè only few users ‚óè use administrative privileges only when necessary and log any administrative action 12 1. System security planning 2. Installation 3. Trusted code and patching 4. Unnecessary services 5. Access control 6. Additional security controls 7. Application security 8. Logging 9. Backup OS security 13 Additional security controls Anti-virus: traditionally on Windows systems (preferred target for attackers). Smartphones are more and more targeted Host-based Ô¨Årewalls, IDS: improve security by Ô¨Åltering connections to ports, blocking usage of ports by (malicious) processes, monitoring traÔ¨Éc and Ô¨Åle integrity Whitelisting applications: limiting programs to the whitelisted ones so to prevent execution of malware (one of the ASD hardening measures) NOTE: Not all organizations or all systems will be suÔ¨Éciently predictable to suit this type of control Security testing: tools to scan for vulnerabilities / weak conÔ¨Ågurations 14 1. System security planning 2. Installation 3. Trusted code and patching 4. Unnecessary services 5. Access control 6. Additional security controls 7. Application security 8. Logging 9. Backup OS security 15 Application security Default data, scripts, or user accounts: should be reviewed, and only retained if required, and suitably secured Example: Web servers often include a number of example scripts, quite a few of which are known to be insecure; should be removed unless needed and secured Access rights: apply minimum privilege Example: a Web server should not have write access to (most of) the web application Ô¨Åles ‚áí In case of a vulnerability, the attacker should not be able to deface the web application by adding malicious content 16 1. System security planning 2. Installation 3. Trusted code and patching 4. Unnecessary services 5. Access control 6. Additional security controls 7. Application security 8. Logging 9. Backup OS security 17 Logging Logging informs about bad things that already happened Crucial for correct remediation and recovery What is logged is part of the initial security planning phase, depends on ‚óè security requirements ‚óè information sensitivity Log rotation: logs easily become very large. It is necessary to compress, archive or delete them, once they become too old or too big Automated vs. manual analysis: manual analysis of big logs is hard and unreliable. Automated analysis (e.g. performed by IDSs) is preferred to spot abnormal activity that can be manually inspected 18 1. System security planning 2. Installation 3. Trusted code and patching 4. Unnecessary services 5. Access control 6. Additional security controls 7. Application security 8. Logging 9. Backup OS security 19 Backup Backup: making copies of data at regular intervals, allowing the recovery of lost or corrupted data over relatively short time periods Archive: retaining copies of data over extended periods of time, in order to meet legal and operational requirements to access past data ‚áí often linked and managed together Online vs. oÔ¨Ñine: online backup is easier and cheaper but in case of attack backups/archives might also be destroyed Example: Distribute.IT Australian ISP hacked in 2011, all backups lost Local vs. remote: in case of calamity (Ô¨Åre, Ô¨Çood, ‚Ä¶) local backups would be destroyed 20 1. Linux/Unix 2. Windows Case studies 21 Linux/Unix (1) System should be up to date: Various automatic tools such as yum, YaST, apt,apk,... Application/service conÔ¨Åguration: Usually in /etc folder and in hidden ‚Äúdot‚Äù Ô¨Åles such as .bashrc Permissions: rwx permissions, ACLs, capabilities, as discussed in the access control lab User accounts: info in /etc/passwd, /etc/shadow, /etc/group. Authentication through PAM (pluggable authentication module) Users: remove unnecessary users, disable login if not necessary SUID root programs should be limited. SGID to a privileged group with appropriate permissions is preferred 22 Linux/Unix (2) Remote access: tcp wrapper enforces hostname-based access control using /etc/hosts.allow and /etc/hosts.deny netfilter and similar tools (e.g. pf in BSD Unix) allow for host-based Ô¨Årewalling Logs: Typically through syslogd. logrotate can be conÔ¨Ågured to rotate any logs on the system chroot jail: used to set the root directory of a service so that the rest of the Ô¨Ålesystem is not accessible Example: /srv/ftp/public, so that /srv/ftp/public/etc/myconfigfile appears as /etc/myconfigfile Note: root can break out the jail Security testing: tools such as Nessus, Tripwire, metasploit and nmap (free) 23 Linux/Unix (3) Mandatory Access Control: allows for centralized policies that cannot be changed by users (even root) Example: a vulnerability in a SUID root service would not give full access to the host. MAC would restrict access to the necessary resources ‚áí ConÔ¨Åguration can be complex! AppArmor and SELinux are popular examples of MAC implementations in Linux systems They are usually shipped with a policy only restricting crucial system processes and using standard DAC for any other program üëé partial MAC implementation üëç more usable 24 Windows (1) System should be up to date: Windows update Application/service conÔ¨Åguration: centralized in the Registry, a database of keys and values Permissions: ACLs grant access to SID (Security ID) referring to a user or a group. MAC for integrity (writing): subject‚Äôs integrity higher that object‚Äôs User accounts: SAM (Security Account Manager), centralized through Active Directory, based on LDAP (Lightweight Directory Access Protocol) Deny: it is possible to deny speciÔ¨Åc accesses to users or groups System wide privileges: for backup, change time, ‚Ä¶ should be granted with care 25 Windows (2) Extra security controls: prevalence of malware requires anti-virus solutions (many commercial products available) Least privilege: administrative rights only use them when required through the User Account Control (UAC). Low Privilege Service Accounts that may be used for long-lived service processes Encrypting File System (EFS): protects against attackers with physical access to computers Network shares: additional security and granularity. Example: hide any objects that a user is not permitted to read Security testing: tools such as Nessus, Tripwire, metasploit and nmap (free) 26 Virtualization hypervisor: software between the hardware and the Virtual Machines (VMs), acts as a resource broker Provides abstractions of all physical resources (such as processor, memory, network, and storage) Enables multiple VMs to be run on a single physical host 27 Type 1 hypervisor: native virtualization Type 1 hypervisor: is loaded as a software layer directly onto a physical server It is called native virtualization: the hypervisor can directly control the physical resources of the host Once installed and conÔ¨Ågured, the server is then capable of supporting virtual machines as guest OSs Type 1 hypervisor Guest OS User Application and Utilities Physical Hardware Guest OS User Application and Utilities 28 Type 2 hypervisor: hosted virtualization Type 2 hypervisor: is loaded as a software layer on a host OS installed on the physical server It is called hosted virtualization: the hypervisor relies on the host OS to access physical resources Once installed and conÔ¨Ågured, the host OS is capable of supporting virtual machines as guests Type 2 hypervisor Guest OS User Application and Utilities Host OS Guest OS User Application and Utilities Physical Hardware 29 Native vs. hosted virtualization Performance: native virtualization usually performs better that hosted one (no extra host OS underneath!) Security: native virtualization is usually more secure that hosted one ‚óè fewer additional layers to protect ‚óè host OS might be vulnerable ‚óè users of host OS might access VM images Multiple environments in the same OS: host based virtualization does not require to dedicate the full machine to VMs (typical in clients) Example: developers that need multiple OSs can use host-based virtualization to run Unix / Linux / Windows on top of any host OS 30 Containers: application virtualization Virtualization containers: is loaded as a software layer on a host OS installed on the physical server Provide an isolated environment for applications, which share the same OS kernel (smaller overhead!) Once installed and conÔ¨Ågured, the container engine is capable of supporting containerized apps Container engine User Application and Utilities Host OS User Application and Utilities Physical Hardware 31 Virtualization security VM escape: a vulnerability in the hypervisor might allow VMs and virtualized applications to access ‚óè the hypervisor ‚óè other VMs ‚óè the host OS Host OS attack: vulnerability in host OS would allow to access guest OS images Virtualization allows for separating services into different VMs or container applications üëç vulnerabilities are conÔ¨Åned to the VM or container üëé vulnerabilities in the virtualization layers might allow for taking full control over the physical server and/or the host OS 32 Hypervisor and infrastructure security Secured in a way similar to OS: ‚óè installed in isolated environment ‚óè clean media ‚óè patched regularly (automatic updates) ‚óè unused services not installed ‚óè unused hardware disconnected Access: only by administrators (locally or on a separate network) Management traÔ¨Éc: for administration and conÔ¨Åguration Application traÔ¨Éc: for VMs and virtualized applications TraÔ¨Éc should be ideally separated ‚óè different physical interfaces ‚óè VLANs ‚óè Software DeÔ¨Åned Networks (SDNs) 33 Virtual Ô¨Årewall VM Bastion Host: separate VM running Bastion Host services: Ô¨Årewalls, IDS, IPS, ‚Ä¶ The VM runs on the hypervisor and monitors (virtual) network interfaces used by VMs VM host-based Ô¨Årewall: Guest OS can use host-based protection as if it were running on physical hardware Hypervisor Ô¨Årewall: a Ô¨Årewall supported directly inside the hypervisor üëç More eÔ¨Écient than VM Bastion Host (it does not compete for resources with other VMs) üëç More secure, in principle, as ‚Äúinvisible‚Äù by other VMs üëé Add complexity to hypervisor 34","libVersion":"0.3.2","langs":""}