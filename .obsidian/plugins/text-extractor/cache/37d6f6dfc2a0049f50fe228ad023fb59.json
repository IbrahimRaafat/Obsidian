{"path":"System Security/Lecture 3 Access Control.pdf","text":"Access Control System Security (CM0625, CM0631) 2024-25 Università Ca’ Foscari Venezia Riccardo Focardi www.unive.it/data/persone/5590470 secgroup.dais.unive.it Deﬁnition Access Control: Protection of system resources against unauthorized access ● The process regulating the use of system resources according to a security policy ● Access is permitted only by authorized entities (users, programs, processes, or other systems) according to that policy. RFC 4949 Internet Security Glossary Context Authorization database User Authentication Access Control Resources Auditing Context Authentication: Veriﬁcation that the credentials of a user or other system entity are valid Authorization:The granting of a right or permission to a system entity to access a system resource. This function determines who is trusted for a given purpose Audit: An independent review and examination of system records and activities in order to ● test for adequacy of controls ● ensure compliance with established policy and operational procedures ● detect breaches in security, and recommend changes in control, policy, and procedures Subjects and objects Subject: is an entity capable of accessing resources (objects) ● Any user or application actually gains access to an object by means of a process ● The process inherits the attributes of the user, such as the access rights Object: is a resource to which access is controlled. An object is an entity used to contain and/or receive information Examples: pages, segments, ﬁles, directories, mailboxes, messages, programs, communication ports, I/O devices. Access rights Read: Subject may view information in an object; read access includes the ability to copy or print Write: Subject may add, modify, or delete data in an object Execute: Subject may execute an object (e.g. a program) Delete: Subject may delete an object Create: Subject may create an object Search: Subject may search into an object (e.g., a query giving a partial view of the content) Note: one access right might imply another one, e.g. read ⇒ search Access control policies Discretionary Access Control (DAC) Mandatory Access Control (MAC) Role-Based Access Control (RBAC) Attribute-Based Access Control (ABAC) Discretionary access control (DAC) Access matrix: access rights for each subject (row) and object (column) README.txt /etc/shadow Carol.pdf /bin/bash Alice Read Write Read Write Read Write Execute Bob Read Read Execute Carol Read Read Write Read Execute NOTE: can be sparse! Access Control List (ACL): for each object, lists subjects and their permission rights (decomposition by columns) ● Easy to ﬁnd which subjects have access to a certain object ● Hard to ﬁnd the access rights for a certain subject Access Control Lists vs. Capabilities README.txt: Alice: Read, Write; Bob: Read; Carol: Read. /etc/shadow: Alice: Read, Write. Example: ACL README.txt /etc/shadow Carol.pdf /bin/bash Alice Read Write Read Write Read Write Execute Bob Read Read Execute Carol Read Read Write Read Execute Capabilities: for each subject, list objects and access rights to them (decomposition by rows) ● Easy to ﬁnd the access rights for a certain subject ● Hard to ﬁnd which subjects have access to a certain object Access Control Lists vs. Capabilities Example: Capabilities Alice: README.txt: Read, Write; /etc/shadow: Read, Write; /bin/bash: Read, Write, Execute. Bob: README.txt: Read; /bin/bash: Read, Execute. READM E.txt /etc/sha dow Carol.p df /bin/bas h Alice Read Write Read Write Read Write Execute Bob Read Read Execute Carol Read Read Write Read Execute Authorization table IDEA: store an entry for each subject, access right, and object ● Querying by subject gives capabilities ● Querying by object gives ACLs Subject Access right Object Alice Read README.txt Alice Write README.txt Alice Read /etc/shadow Alice Write /etc/shadow Alice Read /bin/bash Alice Write /bin/bash Alice Execute /bin/bash Bob Read README.txt Bob Read /bin/bash Bob Execute /bin/bash ... ... ... DAC is … discretionary A subject can give access to the object it owns In some systems, access rights can be given with a copy ﬂag so that non-owners can pass the right to other subjects NOTE: programs typically inherits user’s access rights 1. Attack scenario: A malware program executed by Alice can leak Alice’s sensitive data by simply giving read access to (malicious) Bob 2. Alice might erroneously give read access to her sensitive ﬁles ⇒ Discretionary Access Control is too ﬂexible Access control policies Discretionary Access Control (DAC) Mandatory Access Control (MAC) Role-Based Access Control (RBAC) Attribute-Based Access Control (ABAC) Mandatory Access Control (MAC) MAC imposes rules that subjects cannot change Example: Alice has clearance secret that allows her to own and access secret ﬁles but does not allow her to make those ﬁles accessible to unclassiﬁed users, such as Bob. MAC prevents: 1. Leakage due to malware that would run with clearance secret too, and won’t be able to communicate towards unclassiﬁed users 2. Leakage due to errors: Any ﬁle created by Alice would automatically have level secret Example 1: Bell - La Padula (BLP) Security levels: deﬁne the level of security wrt a certain property, e.g. Conﬁdentiality. Example: inspired from military 1. top secret 2. secret 3. conﬁdential 4. restricted 5. unclassiﬁed Subjects and objects are assigned to security levels ● Clearance: the security level of subjects ● Classiﬁcation: the security level of objects BLP (conﬁdentiality) Deﬁnition: Information should never ﬂow from a level to lower ones ● Simple security: Subjects cannot read from objects at a higher level ● *-property: Subjects cannot write into objects classiﬁed at a lower level … plus standard DAC! Secret Public write write read read write up read down BLP (conﬁdentiality) Deﬁnition: Information should never ﬂow from a level to lower ones ● Simple security: Subjects cannot read from objects at a higher level ● *-property: Subjects cannot write into objects classiﬁed at a lower level … plus standard DAC! Secret Public no write down no read up Forbidden! BLP (conﬁdentiality) Deﬁnition: Information should never ﬂow from a level to lower ones ● Simple security: Subjects cannot read from objects at a higher level ● *-property: Subjects cannot write into objects classiﬁed at a lower level … plus standard DAC! Secret Public Forbidden! no write down no read up Problem: covert channels Deﬁnition: A way to indirectly transmit information Example: A shared resource that is slowed down by a malicious program might be used to encode bits: ● Slow ⇒ 0 ● Fast ⇒ 1 Secret Public Forbidden!covert channel Ex 2: Chinese wall Goal: prevent conﬂicts of interest ● Objects belongs to company datasets ● The company datasets belong to conﬂict of interest classes Idea: Subjects cannot access objects from different companies that belong the same conﬂict of interest class Example: ● Bank A, Oil company B, Oil company C ● B and C objects are in conﬂict Subject S accesses an object from B: ● S can access more B’s objects ● S cannot access C’s objects ● S can access A’s objects Chinese wall policy (read) Simple security: read access is granted if object ● is in the same company dataset as an already accessed object or ● belongs to an entirely different conﬂict of interest class Problem with write access: ● Bank A, Oil company B, Oil company C ● B and C are in conﬂict 1. Subject S’ reads from C 2. Subject S reads from B and write into an A 3. Subject S’ reads from A ⇒ Conﬂict! Chinese wall policy (write) *-property: write access is granted if ● access is permitted by simple security property and ● no object can be read which is in a different company dataset to the one for which write access is requested NOTE: This rule is very restrictive: read/write permission is only possible on single company datasets In the original paper authors propose the idea of sanitized information, i.e., company information that does not require protection Relaxed *-property: and contains unsanitized information Access control policies Discretionary Access Control (DAC) Mandatory Access Control (MAC) Role-Based Access Control (RBAC) Attribute-Based Access Control (ABAC) Role-Based Access Control (RBAC) DAC speciﬁes access rights for each subject and object RBAC adds a new layer: roles ● Subjects are assigned to roles ● Roles have access rights to objects NOTE: RBAC can express DAC and MAC policies Role 1 Role 2 Role 3 Role 4 RBAC access matrix Access matrix: access rights for each role (row) and object (column) README.txt /etc/shadow Carol.pdf /bin/bash Administrator Read Write Read Write Read Write Execute Student Read Read Execute Professor Read Read Write Read Execute RBAC role assignment Role assignment: for each subject (row) and role (column) Administrator Student Professor Alice x x Bob x Carol x Note: we can have multiple roles per user and multiple users per role Users establish sessions with the roles they need to accomplish a task (least privilege principle) Roles can be organized as a hierarchy: Example: Professor → Department Dean Professor → Rector Hierarchies and exclusive roles Roles might be mutually exclusive to enforce separation of duties Separation of duties: if one task requires two users to be performed Examples: ● creating vs. authorizing an account ● auditing vs. performing a task Access control policies Discretionary Access Control (DAC) Mandatory Access Control (MAC) Role-Based Access Control (RBAC) Attribute-Based Access Control (ABAC) Attribute-Based Access Control (ABAC) IDEA: Access regulated through attributes Subject attributes: name, title, age, … SA 1, …, SA K Object attributes: author, category, … OA 1, …, OA M Environment attributes: date, setting, connection, … EA 1, …, EA N For each subject s, object o and environment e: ATTR(s) ∈ SA 1×SA 2×...×SA K ATTR(o) ∈ OA 1×OA 2×...×OA M ATTR(e) ∈ EA 1×EA 2×...×EA N can_access(s,o,e) = f(ATTR(s),ATTR(o),ATTR(e)) ABAC example Access to online streaming can_access(s,o,e) = ( (Membership(s) == Premium) ∨ (Membership(s) == Regular ∧ Type(o) == OldRelease) ) ∧ ( ExpireDate(s) >= Time(e) ) 👍 ABAC is more ﬂexible than RBAC 👍 ABAC can express DAC, MAC, and RBAC 👎 Access decision is more complex ⇒ On the Web and Cloud is more and more popular (performance is already limited by network latency) Exercise: deﬁne BLP with ABAC BLP is no read-up no write-down What attributes? ● Use security levels! clearance(s) and classification(o) are the security levels of s and o ● access_right(e) in {read,write} BLP_can_access(s,o,e) = access_right(e) == read AND clearance(s) >= classification(o) OR access_right(e) == write AND clearance(s) <= classification(o)","libVersion":"0.3.2","langs":""}