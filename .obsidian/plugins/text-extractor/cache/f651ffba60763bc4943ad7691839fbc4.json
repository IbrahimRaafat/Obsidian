{"path":"System Security/Lecture 6- Denial-of-Service.pdf","text":"Denial of Service System Security (CM0625, CM0631) 2024-25 Università Ca’ Foscari Venezia Riccardo Focardi www.unive.it/data/persone/5590470 secgroup.dais.unive.it Increasingly popular attack that compromises the availability of a service Example: service is “ﬂooded” by many spurious requests that make it impossible to respond to valid requests Introduction Denial of Service (DoS) Introduction Distributed Denial of Service (DDoS) DoS is particularly effective when launched from many devices. Increasing strength in the years ... ● ~400 Mbps in 2002 ● ~100 Gbps in 2010 ● ~300 Gbps Spamhaus, in 2013 ● ~600 Gbps BBC, in 2015 ⇒ easily exceed the bandwidth! But usually not very long (~30min, botnets-for-hire) Introduction Distributed Denial of Service (DDoS and IoT) In 2016 a new kind of attack on Dyn, a DNS provider ● long, many hours ● involved multiple attacks from over 100,000 devices ● IoT (Internet of Things) devices, such as webcams and baby monitors ● reached a ~1.2 TBps peak Deﬁnition NIST SP 800-61 DoS: An attack that prevents or impairs the authorized use of networks, systems, or applications by exhausting resources Targets: ● network bandwidth ● system resources ● application resources Target: network bandwidth Network bandwidth: capacity of links connecting a server to the Internet ⇒ Usually the link to the Internet Service Provider (ISP) If incoming traﬃc exceeds the bandwidth packets will be discarded ⇒ Legitimate packets discarded if malicious ones exceeds network bandwidth Internet ISP router LAN Target: system resources Network handling resources: required to implement network protocols (e.g. buffers) ⇒ When limit is reached new network connections are refused Example: TCP connections “Poison packets” might trigger bugs that break network services Examples: ping of death, teardrop Internet ISP router LAN Target: application resources Application resources: required to accomplish tasks ⇒ When limit is reached application becomes unresponsive Example: Excessively complex queries to a database Destructive attacks, exploiting bugs, that crash the application Examples: Piggybacked SQLi Internet ISP router LAN Web Target ● Network bandwidth ● System resources ● Application resources Flooding attacks Flooding attack: overwhelm network capacity ICMP ﬂooding: the Internet Control Message Protocol (ICMP) is used to send error messages and operational information Example: ping allows for testing connectivity (-f option ﬂoods the server) UDP ﬂooding: attacker targets a UDP service (es. diagnostic echo) TCP ﬂooding: attacker targets TCP services Target server might either respond, generate a ICMP destination unreachable or reject the packet ⇒ Responses increase the load! Simple ﬂooding Simple ﬂooding attack: overwhelm network capacity from a single host Example: ping with -f option Internet ISP router LAN However: ● Source easily identiﬁed (legal actions taken) ● Target will respond “reﬂecting” the attack back Source address spooﬁng Source address spooﬁng: attacker use raw socket interface to change source address Randomly selected source addresses ⇒ Responses will be scattered around the Internet ⇒ Possible errors packets from spoofed address will go towards the target and contribute to DoS Source address spooﬁng makes it hard to identify the attacker Cause: TCP/IP does not ensure that source address really corresponds to the originating host It would be necessary to (manually) query the logs of traversed routers in order to identify the trajectory Distributed DoS (DDos) Botnets: a collection of zombie devices under the attacker control Botnets are hired for DDos ● ~40% of DDoS in 2015 were from botnets for hire Flooding coming from thousands of hosts easily reaches Gbps bandwidth Target ● Network bandwidth ● System resources ● Application resources SYN spooﬁng This attack overﬂows the tables used to manage TCP connections TCP uses a three-way handshake to establish a connection: ● IP lost packets are transparently resent ● Applications using TCP won’t notice lost packets and retransmissions SYN (seq=x) SYN-ACK (seq=y, ack=x+1) ACK (ack=y+1) SYN spooﬁng (ctd) Attack scheme: 1. Attacker sends SYN packets with spoofed source addresses 2. For each spoofed source S: a. Server sends SYN-ACK to S b. If Server timeouts and NS<MAX NS = NS+1 goto a c. Delete connection with S ⇒ Table of TCP requests overﬂows SYN-ACK SYN-ACK SYN-ACK SYN-ACK ... SYN S SYN spooﬁng (ctd) Attacker sends enough forged requests to keep the table full ⇒ Server is cut off from the Internet NOTE: Using random spoofed addresses make the probability of not getting a RST (reset) answer high The volume of SYN requests is low and far from link capacity SYN SYN-ACK SYN-ACK SYN-ACK SYN-ACK ... S Target ● Network bandwidth ● System resources ● Application resources Application protocol ﬂooding Attacker ﬂoods an application protocol Examples: ● Session Initiation Protocol (SIP) used in VoIP. INVITE requests go through proxies and consume system/network resources ● HTTP requests can be heavy (e.g. download of large ﬁle) Slowloris: a particular DoS attack that leverages server multi-threading ● start many HTTP requests without completing them ● keep the connection alive by sending new lines, periodically Consumes all available web server connections (in terms of internal system/application resources) DoS techniques ● Reﬂection ● Ampliﬁcation Reﬂection attacks Attacker sends packets to an intermediary with a spoofed source address of the target The intermediary responds to the actual target ● If response is larger than request, attack is also ampliﬁed ● Tracing is hard if attacker uses many intermediaries Examples: DNS, SNMP and ISAKMP has been exploited for reﬂection (they can generate large responses) TCP SYN reﬂection: Attacker can send SYN so that intermediary sends SYN-ACK which in turns generates a RST packet ⇒ Both SYN-ACK and RST ﬂood target’s network Reﬂection “loop” When echo service (port 7) is enabled reﬂection loops are possible Example: The attacker sends a packet to 1.2.3.4 port 7 , with spoofed source address 5.6.7.8 port 7 ● Intermediary echoes to target ● Target echoes to Intermediary ● … (loop) from 5.6.7.8:7 to 1.2.3.4:7 from 1.2.3.4:7to 5.6.7.8:7 ... from 5.6.7.8:7 to 1.2.3.4:7 from 1.2.3.4:7to 5.6.7.8:7 1.2.3.4 5.6.7.8 Ampliﬁcation attacks Ampliﬁcation: generating multiple response packets with a single request Example: send a packet to the broadcast address of a network with spoofed address ⇒ all hosts (with the service enabled) will respond to the target Response ... Request (broadcast) Response Response Defenses DoS cannot be fully prevented: attackers that can ﬂood a service with legitimate requests will limit traﬃc from other users DoS can be “incidental”: important news make legitimate users overload referenced web sites Defenses what and when Prevention and mitigation (before the attack) Detection (during the attack) Source traceback (during and after the attack) Reaction (after the attack) Prevention: spoofed source addresses Solution 1 : ﬁltering spoofed source address as close as possible to the originating host Example: where the organization’s network connects to the Internet Filtering spoofed source addresses is a standard security recommendation (RFC 2827 ) which is too often disregarded! Solution 2 : ensure that the path back to the claimed source address is the one being used by the current packet Example: CISCO implemented this however when routing is asymmetrical (path A → B and B ← A differ) this solution is too strict Multihoming: Connecting to many networks for reliability/performance Prevention: SYN spooﬁng attack Make the protocol “stateless” by encoding state information directly in the SYN-ACK sequence number y ⇒ No TCP request table overﬂow! When the ACK y+1 is received the server can reconstruct state information from y Example: “SYN Cookies” in FreeBSD and Linux (similar idea in Windows) SYN (seq=x) SYN-ACK (seq=y, ack=x+1) ACK (ack=y+1) Mitigation: rate limits and random drops ICMP and UDP ﬂooding to diagnostic services can be mitigated by imposing limits on packet rates Similarly, SYN spooﬁng attacks can be mitigated by limiting the connection rate to a certain service Table overﬂow of SYN spooﬁng can be mitigated by randomly dropping connections IDEA: overﬂow is a probable sign of attack, randomly dropping a connection will more likely drop an attacker’s connection Could drop a legitimate connection but it is better than full DoS Other prevention techniques Block broadcast (ampliﬁcation) Block/limit suspicious services and combinations of ports (reﬂection) Check human interaction, e.g. with captcha (application resources) Keep systems up-to-date and secured (do not become part of a botnet) Monitor systems, especially high-performance, well-connected servers (potential intermediary) Use mirrored and replicated servers to increase reliability and resilience to DoS attacks Detection, source traceback and reaction Detection: capturing packet ﬂows and analyzing them. If the attack is identiﬁed ● suitable ﬁlters can be activated ● bugs can be ﬁxed ● alternate backup servers can be activated ● ... Source traceback: necessary for legal actions, need collaborating ISPs (can be complex) Reaction: analyzing the attack and response in order to gain beneﬁt from the experience and to improve future handling. The organization’s security can be improved as a result","libVersion":"0.3.2","langs":""}